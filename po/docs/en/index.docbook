<?xml version="1.0" ?>
<!DOCTYPE book PUBLIC "-//KDE//DTD DocBook XML V4.5-Based Variant V1.1//EN" "dtd/kdedbx45.dtd" [
  <!-- Define an entity for your application if it is not part of KDE
       Git -->
  <!ENTITY performer "<application>Performer</application>">
  <!ENTITY carla "<ulink url='http://kxstudio.linuxaudio.org/Applications:Carla'><application>Carla</application></ulink>">
  <!ENTITY okular "<ulink url='help:/okular/'><application>Okular</application></ulink>">
  <!ENTITY kappname "&performer;"><!-- replace performer here
                                            do *not* replace kappname-->
  <!ENTITY i18n-translatable-entity "<application>Translatable Entity</application>">
  <!ENTITY % addindex "IGNORE">
  <!ENTITY % English "INCLUDE"> <!-- ONLY If you are writing non-English
                                     original documentation, change
                                     the language here -->
  <!ENTITY Julian.Wolff "<personname><firstname>Julian</firstname><surname>Wolff</surname></personname>">
  <!ENTITY Julian.Wolff.mail "<email>wolff@julianwolff.de</email>">
]>

<!-- ................................................................ -->

<!-- The language must NOT be changed here. -->
<!-- If you are writing original documentation in a language other -->
<!-- than English, change the language above ONLY, not here -->
<!-- Change the value of id to the name of your application -->
<book id="performer" lang="&language;">

<!-- This header contains all of the meta-information for the document such
as Authors, publish date, the abstract, and Keywords -->

<bookinfo>
<title>The &performer; Handbook</title>

<authorgroup>
<author>
<!-- This is just put in as an example.  For real documentation, please
     define a general entity in entities/contributor.entities, e.g.
<!ENTITY George.N.Ugnacious "<personname><firstname>George</firstname><othername>N.</othername><surname>Ugnacious</surname></personname>">
<!ENTITY George.N.Ugnacious.mail "<email>gnu@kde.org</email>">
and use `&George.N.Ugnacious; &George.N.Ugnacious.mail;' in the author element.
 -->
&Julian.Wolff; &Julian.Wolff.mail;
</author>
<!-- TRANS:ROLES_OF_TRANSLATORS -->
</authorgroup>

<copyright>
<year>2017</year>
<holder>&Julian.Wolff;</holder>
</copyright>
<legalnotice>&FDLNotice;</legalnotice>

<!-- Date of the documentation
Change date/releaseinfo only if
   docbook is updated and verified to be valid for the current app version
   docbook is proofreaded and verified to be valid for the current app version
Don't forget to include this last date.
Please respect the format of the date (YYYY-MM-DD),it is used by scripts.
-->
<date>2017-01-03</date>

<!--version information of Frameworks/Plasma/Applications this documentation is valid for.
Example:
Frameworks xx.yy for docbooks in frameworks
Plasma xx.yy for docbooks in plasma workspace
Applications xx.yy for docbooks released as Applications
xx.yy (Applications xx.yy) for docbooks with own version released as Applications
$applicationname xx.yy for applications with independent release schedule (extragear/playground)
-->
<releaseinfo>Performer 1.0</releaseinfo>

<!-- Abstract about this handbook -->

<abstract>
<para>
&performer; is an audio session manager for live performances.
</para>
</abstract>

<!-- This is a set of Keywords for indexing by search engines.
Please at least include KDE, the KDE section it is in, the name
 of your application, and a few relevant keywords. -->

<keywordset>
<keyword>KDE</keyword>
<keyword>Music</keyword>
<keyword>Live</keyword>
<keyword>Performance</keyword>
<keyword>Audio</keyword>
<keyword>Carla</keyword>
<keyword>Jack</keyword>
<keyword>Okular</keyword>
</keywordset>

</bookinfo>

<!-- The contents of the documentation begin here.  Label
each chapter so with the id attribute. This is necessary for two reasons: it
allows you to easily reference the chapter from other chapters of your
document, and if there is no ID, the name of the generated HTML files will vary
from time to time making it hard to manage for maintainers and for the CVS
system. Any chapter labelled (OPTIONAL) may be left out at the author's
discretion. Other chapters should not be left out in order to maintain a
consistent documentation style across all KDE apps. -->


<!-- KDE Games have special chapters

Introduction

How to play

Game Rules, Strategies and Tips

Interface Overview

Frequently asked questions

Credits and License

Please use one of index.docbook files from kdegames

-->
<chapter id="introduction">
<title>Introduction</title>

<!-- The introduction chapter contains a brief introduction for the
application that explains what it does and where to report
problems. Basically a long version of the abstract.  Don't include a
revision history. (see installation appendix comment) -->

<para>
&performer; lets you manage all the songs in your setlist as individual &carla; patches and loads each of them when you need it. Additionally &performer; uses &okular;,  QWebEngine or QtWebView to display notes and chords of your songs.
</para>
</chapter>

<chapter id="using-performer">
<title>Using &performer;</title>

<!-- This chapter should tell the user how to use your app. You should use as
many sections (Chapter, Sect1, Sect3, etc...) as is necessary to fully document
your application. -->

<para>

<!-- Note that all graphics should be in .png format. Use no gifs because of
patent issues. -->

<screenshot>
<screeninfo>Here's a screenshot of &performer;</screeninfo>
	<mediaobject>
	  <imageobject>
	    <imagedata fileref=".screenshot.png" format="PNG"/>
	  </imageobject>
	  <textobject>
	    <phrase>Screenshot</phrase>
	  </textobject>
	</mediaobject>
</screenshot>
</para>


<sect1 id="quickstart">
<title>Quick Start</title>

<para>Start Performer.</para>

<para>Using command line tools or a jack patchbay like <ulink url="http://kxstudio.linuxaudio.org/Applications:Catia"><application>Catia</application></ulink> connect the ports of Performer to the appropriate system ports or to the ports of other jack clients.</para>

<para>
<screenshot>
<screeninfo>Patchbay</screeninfo>
	<mediaobject>
	  <imageobject>
	    <imagedata fileref="connect.png" format="PNG"/>
	  </imageobject>
	  <textobject>
	    <phrase>Patchbay</phrase>
	  </textobject>
	</mediaobject>
</screenshot>
</para>

<para>
The &carla; instances created by Performer will connect to the same ports Performer is connected to. 
</para>
<para>
Connect the events-in port to a MIDI input device. Ports connected to events-in will act as MIDI input for &carla; instances created by Performer. 
</para>
<para>
Connect the control_gui-in port to a MIDI input device that you want to use to control the GUI of Performer.
</para>
<para>
Click the "Add" button. Change the name of the song to the name of a song you want to have in your setlist. Add a &carla; patch file (.carxp) for this song. Add notes or chords (.pdf, .txt, .png, ...) for this song. They will be displayed when the song is active or when you click on it's entry in the setlist.
</para>
<para>
<screenshot>
<screeninfo>Add song</screeninfo>
	<mediaobject>
	  <imageobject>
	    <imagedata fileref="add.png" format="PNG"/>
	  </imageobject>
	  <textobject>
	    <phrase>Add</phrase>
	  </textobject>
	</mediaobject>
</screenshot>
</para>
<para>
Right click the song's entry in the setlist. Choose "Play now". If you assigned a &carla; patch to this song, a new instance of &carla; will be created, loading the patch file. It's ports will be connected to the same ports Performer is connected to, allowing you to play this song.
</para>
<para>
Add some more songs to your setlist. 
</para>
<para>
Save the setlist (<xref linkend="file-save"/>).
</para>
<para>
Click "Next". A &carla; instance for the next song in your setlist will be created. The &carla; instances of the previous and of the next song are still preloaded, allowing you to quickly switch to one of these songs, but only the active song is connected to your system ports.
</para>
<para>
Right click a GUI element like the "Next" button or the document viewer's scrollbar. In the shown MIDI learn context menu choose "Learn MIDI CC". Move a control of a MIDI device connected to the control_gui-in port. This control will be 
assigned to the GUI element, allowing you to control Performer's GUI with your MIDI device.
</para>

</sect1>
</chapter>

<chapter id="commands">
<title>Command Reference</title>

<!-- (OPTIONAL, BUT RECOMMENDED) This chapter should list all of the
application windows and their menubar and toolbar commands for easy reference.
Also include any keys that have a special function but have no equivalent in the
menus or toolbars. 
This may not be necessary for small apps or apps with no tool or menu bars.

Don't bother users with well known kde menu items like Settings->Shortcuts etc. 

Use cases for a command reference:

Applications with many menu items (Kate/Konqueror) 
Applications with different modes and menus (KWrite/Konqueror)
-> Enables search for menu items

For Applications with default menu items and some special items where user 
needs additional information use something like:
"Apart from the common KDE menu items you find these action in the menu:

File -> Special Action: Explanation of special action

Tools -> Special Tool: Explanation of special tool

Use variablelist markup for this
-->

<sect1 id="kapp-mainwindow">
<title>The main &performer; window</title>

<sect2>
<title>The File Menu</title>
<para>
<variablelist>
<varlistentry  id="file-new">
<!-- Tip: With id's here, then you can use them like 
"select <xref linkend="file-new"/> to open the file dialog"
which will be expanded to:
"select File->New (Ctrl+N) to open the file dialog"
-->
<term><menuchoice>
<shortcut>
<keycombo action="simul">&Ctrl;<keycap>N</keycap></keycombo>
</shortcut>
<guimenu>File</guimenu>
<guimenuitem>New</guimenuitem>
</menuchoice></term>
<listitem><para><action>Creates a new setlist</action></para></listitem>
</varlistentry>

<varlistentry  id="file-open">
<term><menuchoice>
<shortcut>
<keycombo action="simul">&Ctrl;<keycap>O</keycap></keycombo>
</shortcut>
<guimenu>File</guimenu>
<guimenuitem>Open</guimenuitem>
</menuchoice></term>
<listitem><para><action>Opens a setlist</action></para></listitem>
</varlistentry>

<varlistentry  id="file-save">
<term><menuchoice>
<shortcut>
<keycombo action="simul">&Ctrl;<keycap>S</keycap></keycombo>
</shortcut>
<guimenu>File</guimenu>
<guimenuitem>Save</guimenuitem>
</menuchoice></term>
<listitem><para><action>Saves the setlist</action></para></listitem>
</varlistentry>

<varlistentry  id="file-save-as">
<term><menuchoice>
<shortcut>
<keycombo action="simul">&Ctrl;&Shift;<keycap>S</keycap></keycombo>
</shortcut>
<guimenu>File</guimenu>
<guimenuitem>Save As</guimenuitem>
</menuchoice></term>
<listitem><para><action>Saves the setlist to a specified location</action></para></listitem>
</varlistentry>

</variablelist>
</para>

</sect2>

<!-- Examples how to use the common menus Settings and Help -->

<sect2 id="settings-help-menu">
<title>The Settings and Help Menu</title>
<para>
&performer; has the common &kde; <guimenu>Settings</guimenu> and <guimenu>Help</guimenu>
menu items, for more information read the sections about the <ulink url="help:/fundamentals/ui.html#menus-settings"
>Settings Menu</ulink> and <ulink url="help:/fundamentals/ui.html#menus-help">Help Menu</ulink>
of the &kde; Fundamentals.
</para>

<para>Apart from the common &kde; menus described in the <ulink url="help:/fundamentals/ui.html#menus">Menu</ulink>
chapter of the &kde; Fundamentals documentation &performer; has these application specific menu entries:
<variablelist>
<varlistentry  id="settings-pc">
<term><menuchoice>
<guimenu>Settings</guimenu>
<guimenuitem>MIDI Program Changes</guimenuitem>
</menuchoice></term>
<listitem><para>If enabled, the setlist will react to MIDI Program Change messages. This means that if a MIDI Program Change message is received at the control_gui-in port, the <action>Play Now</action>-action of the corresponding song in the setlist will be triggered.</para></listitem>
</varlistentry>

<varlistentry  id="settings-alwaysontop">
<term><menuchoice>
<guimenu>Settings</guimenu>
<guimenuitem>Always on top</guimenuitem>
</menuchoice></term>
<listitem><para>The main window of &performer; always stays on top if this is enabled.</para></listitem>
</varlistentry>

<varlistentry  id="settings-hide-carla">
<term><menuchoice>
<guimenu>Settings</guimenu>
<guimenuitem>Hide &carla;</guimenuitem>
</menuchoice></term>
<listitem><para>Each song in a setlist of &performer; can have a &carla; patch assigned. If a song is active, an instance of &carla; will be started, loading the corresponding patch of the song. If this menu item is enabled, the instances of &carla; started by &performer; are invisible. If it is disabled, the instances of &carla; are shown as regular application windows. Note that a change to this menu item only affects future instances of &carla;, not the currently active ones. Use <xref linkend="toolbar-panic"/> to reload all instances of &carla;.</para></listitem>
</varlistentry>

<varlistentry  id="settings-midi">
<term><menuchoice>
<guimenu>Settings</guimenu>
<guimenuitem>Show MIDI controls</guimenuitem>
</menuchoice></term>
<listitem><para>Show a dock widget with settings for MIDI controls (<xref linkend="dock-midi" endterm="dock-midi-title"/>).</para></listitem>
</varlistentry>

</variablelist>
</para>

</sect2>

<sect2 id="toolbar">
<title>The Toolbar</title>
<para>
Some actions in the toolbar of &performer; belong to the document viewer used. Please see the documentation of the corresponding viewer (&okular;, QWebEngine or QtWebView) for more information.
</para>

<para>Important toolbar actions in &performer; are:
<variablelist>
<varlistentry  id="toolbar-alwaysontop">
<term><menuchoice>
<guimenu>Toolbar</guimenu>
<guimenuitem>Always on top</guimenuitem>
</menuchoice></term>
<listitem><para>See <xref linkend="settings-alwaysontop"/></para></listitem>
</varlistentry>

<varlistentry  id="toolbar-panic">
<term><menuchoice>
<guimenu>Toolbar</guimenu>
<guimenuitem>Panic!</guimenuitem>
</menuchoice></term>
<listitem><para>As &performer; uses &carla; to load plugins and &carla; itself loads different plugins, there might be cases where something goes wrong. Pressing the Panic button terminates all instances of &carla; loaded by &performer; and reloads the active songs.</para></listitem>
</varlistentry>

</variablelist>
</para>

</sect2>

<sect2 id="dock-setlist">
<title>The Setlist dock widget</title>

<para>&performer; organizes songs in a setlist. The songs in the current setlist are shown in the Setlist dock widget.</para>
<para>Important actions in the Setlist dock widget are:
<variablelist>
<varlistentry  id="setlist-add">
<term><menuchoice>
<guimenu>Setlist</guimenu>
<guimenuitem>Add</guimenuitem>
</menuchoice></term>
<listitem><para>Add a song to the setlist. Songs can be configured in <xref linkend="song-setup-form" endterm="song-setup-form-title"/></para></listitem>
</varlistentry>

<varlistentry  id="setlist-previous">
<term><menuchoice>
<guimenu>Setlist</guimenu>
<guimenuitem>Previous</guimenuitem>
</menuchoice></term>
<listitem><para>Play the previous song in the setlist.</para></listitem>
</varlistentry>

<varlistentry  id="setlist-next">
<term><menuchoice>
<guimenu>Setlist</guimenu>
<guimenuitem>Next</guimenuitem>
</menuchoice></term>
<listitem><para>Play the next song in the setlist.</para></listitem>
</varlistentry>

<varlistentry  id="context-playnow">
<term><menuchoice>
<guimenu>Song context menu</guimenu>
<guimenuitem>Play now</guimenuitem>
</menuchoice></term>
<listitem><para>Play this song.</para></listitem>
</varlistentry>

<varlistentry  id="context-remove">
<term><menuchoice>
<guimenu>Song context menu</guimenu>
<guimenuitem>Remove entry</guimenuitem>
</menuchoice></term>
<listitem><para>Remove this song.</para></listitem>
</varlistentry>

</variablelist>
</para>

<sect3 id="song-setup-form">
<title id="song-setup-form-title">The song setup form</title>
<para>Songs can be configured in the song setup form. The following entries exist:
<variablelist>
<varlistentry  id="song-preload">
<term><menuchoice>
<guimenu>Setup song</guimenu>
<guimenuitem>Preload</guimenuitem>
</menuchoice></term>
<listitem><para>Preload the song. If disabled, the song will only be loaded if it is active.</para></listitem>
</varlistentry>

<varlistentry  id="song-title">
<term><menuchoice>
<guimenu>Setup song</guimenu>
<guimenuitem>Title</guimenuitem>
</menuchoice></term>
<listitem><para>The name of the song.</para></listitem>
</varlistentry>

<varlistentry  id="song-patch">
<term><menuchoice>
<guimenu>Setup song</guimenu>
<guimenuitem>Carla Patch</guimenuitem>
</menuchoice></term>
<listitem><para>The &carla; patch for the song.</para></listitem>
</varlistentry>

<varlistentry  id="song-notes">
<term><menuchoice>
<guimenu>Setup song</guimenu>
<guimenuitem>Notes</guimenuitem>
</menuchoice></term>
<listitem><para>Notes or chords for this song.</para></listitem>
</varlistentry>

</variablelist>
</para>

</sect3>

</sect2>

<sect2 id="dock-midi">
<title id="dock-midi-title">The MIDI control dock widget</title>

<para>MIDI CC messages received at the control_gui-in port can control actions of &performer;. The MIDI control dock widget can be used to map MIDI CC messages to actions of &performer;. It can be shown or hidden with <xref linkend="settings-midi"/>.</para>

<para>The "Action" column shows different actions in &performer; that can be controlled by MIDI CC messages. Enter a number between 0 and 127 in the "CC" column, to make the corresponding MIDI CC control an action in &performer;.</para> 
<para>The "Min" and "Max" columns can be used to set the range of the MIDI controller used. For example, if a hardware MIDI controller sends CC 7, but sends only values between 20 and 100 for mechanical or other reasons, Min should be set to 20 and Max should be set to 100, to make the hardware controller control the full range of the action in &performer;.</para>
<para>If Max &lt; Min, the corresponding actions value will be inverted. For example, if the vertical scroll action is assigned to a MIDI CC and Min &lt; Max for this action, increasing the controller value will scroll down the document. If Max &lt; Min, increasing the controller value will scroll up the document.</para>
<para>The "Value" column shows the current value of an assigned MIDI CC.</para>

<para>Besides setting a MIDI CC in the MIDI control dock widget, MIDI CCs can be mapped to actions by using the <xref linkend="context-midi-learn"/> action in the context menu of the corresponding GUI widget.</para>

</sect2>

<sect2 id="context-midi">
<title>The MIDI learn context menu</title>
<para>
Most GUI widgets in &performer; are MIDI controllable (see <xref linkend="dock-midi"/>). These widgets have a MIDI learn context menu, that makes it easy to assign MIDI CC messages to their corresponding actions:

<variablelist>
<varlistentry  id="context-midi-learn">
<term><menuchoice>
<guimenu>Widget context Menu</guimenu>
<guimenuitem>Learn MIDI CC</guimenuitem>
</menuchoice></term>
<listitem><para>After this menu entry was activated, the next MIDI CC message received at the control_gui-in port will be mapped to the widgets main action.</para></listitem>
</varlistentry>

<varlistentry  id="context-midi-remove">
<term><menuchoice>
<guimenu>Widget context Menu</guimenu>
<guimenuitem>Remove MIDI CC</guimenuitem>
</menuchoice></term>
<listitem><para>Removes a previously assigned MIDI CC from the widgets main action.</para></listitem>
</varlistentry>

</variablelist>
</para>

</sect2>

</sect1>
</chapter>

<chapter id="faq">
<title>Questions and Answers</title>

&reporting.bugs;
&updating.documentation;

<!--qandaset id="faqlist">
<qandaentry>
<question>
<para>My Mouse doesn't work. How do I quit &performer;?</para>
</question>
<answer>
<para>You silly goose! Check out the <link linkend="commands">Commands
Section</link> for the answer.</para>
</answer>
</qandaentry>
<qandaentry>
<question>
<para>Why can I not twiddle my documents?</para>
</question>
<answer>
<para>You can only twiddle your documents if you have the foobar.lib
installed.</para>
</answer>
</qandaentry>
</qandaset-->
</chapter>

<chapter id="credits">

<!-- Include credits for the programmers, documentation writers, and
contributors here. The license for your software should then be included below
the credits with a reference to the appropriate license file included in the KDE
distribution. -->

<title>Credits and License</title>

<para>
&performer;
</para>
<para>
Program copyright 2016-2017 &Julian.Wolff; &Julian.Wolff.mail;
</para>
<!--para>
Contributors:
<itemizedlist>
<listitem><para>Konqui the &kde; Dragon <email>konqui@kde.org</email></para>
</listitem>
<listitem><para>Tux the &Linux; Penguin <email>tux@linux.org</email></para>
</listitem>
</itemizedlist>
</para-->

<!-- TRANS:CREDIT_FOR_TRANSLATORS -->

&underFDL;               <!-- FDL: do not remove -->

<!-- Determine which license your application is licensed under,
     and delete all the remaining licenses below:

     (NOTE:  All documentation are licensed under the FDL,
     regardless of what license the application uses) -->

&underGPL;        	 <!-- GPL License -->

</chapter>

&documentation.index;
</book>

<!--
Local Variables:
mode: xml
sgml-minimize-attributes:nil
sgml-general-insert-case:lower
sgml-indent-step:0
sgml-indent-data:nil
End:

vim:tabstop=2:shiftwidth=2:expandtab
kate: space-indent on; indent-width 2; tab-width 2; indent-mode none;
-->
